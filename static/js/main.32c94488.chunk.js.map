{"version":3,"sources":["components/func/GlobalVariables.js","components/func/JWT_AUTH.js","components/Login.js","components/Header.js","App.js","components/func/firebase_setup.js","components/Page.js","components/PublicPage.js","components/UsersByTag.js","components/AllTags.js","index.js"],"names":["GlobalVariables","jwt","require","credentials","process","cookieName","JWT_AUTH","getSessionData","token","Cookies","get","Error","client","verify","exp","Date","now","this","removeSessionData","e","console","log","message","window","location","href","homepage","loginPage","saveSessionData","clientData","data","email","Math","floor","sign","set","expires","remove","Login","_jsxs","className","children","_jsx","onClick","GoogleLogin","clientId","buttonText","onSuccess","googleResponse","profileObj","profileData","profilePage","onFailure","cookiePolicy","Header","App","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getDatabase","Page","_useState","useState","_useState2","_slicedToArray","userData","setUserData","_useState3","_useState4","tags","setTags","_useState5","_useState6","newTag","setNewTag","useEffect","id","btoa","userPath","userRef","ref","then","snapshot","exists","val","name","profilePictureUrl","imageUrl","public_id","hash","i","length","charCodeAt","abs","emailToHash","publicRef","catch","error","getData","src","alt","style","maxWidth","maxHeight","target","rel","publicProfilePage","split","map","tag","index","type","placeholder","value","onChange","trim","test","toLowerCase","updatedTags","concat","_toConsumableArray","updatedUserData","_objectSpread","alert","tagsUserPath","tagsUserRef","forEach","element","tagsPath","tagsRef","profile_id","useParams","publicUserPath","publicUserRef","otherprops","_objectWithoutProperties","_excluded","UsersByTag","users","setUsers","tagRef","tagData","userIds","Object","keys","user","_Fragment","tagPage","router","createHashRouter","path","PublicPage","allTagPage","AllTags","ReactDOM","document","getElementById","render","React","RouterProvider"],"mappings":"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","file":"static/js/main.32c94488.chunk.js","sourcesContent":["const GlobalVariables = {}\nGlobalVariables.homepage=\"https://rslgp.github.io/reactJWT/#\";\nGlobalVariables.loginPage=\"auth/login\";\nGlobalVariables.profilePage=\"page\";\nGlobalVariables.publicProfilePage=\"profile/:profile_id\";\nGlobalVariables.tagPage=\"tags/:tag\";\nGlobalVariables.allTagPage=\"tags\";\nexport default GlobalVariables;","import Cookies from \"js-cookie\";\nimport GlobalVariables from \"./GlobalVariables\";\nvar jwt = require(\"jsonwebtoken\");\n\nvar credentials = {}\ncredentials.jwt = process.env.REACT_APP_JWT;\n\nconst cookieName = \"access_token\";\nconst expirationHours=1;\n\nconst JWT_AUTH = {\n  getSessionData: function () {\n    try {\n        var token = Cookies.get(cookieName);\n        if (!token) {\n            // Token is not present\n            throw new Error('No Auth Cookie');\n        }\n        var client = jwt.verify(token, credentials.jwt);\n\n        // Check if token has expired\n        if (client.exp && client.exp < Date.now() / 1000) {\n            // Token has expired\n            this.removeSessionData(); // Remove the expired token            \n            throw new Error('Token Expired');\n        }\n        return client;\n    } catch (e) {\n        console.log(e.message);\n        window.location.href=GlobalVariables.homepage +\"/\"+ GlobalVariables.loginPage;\n        return null;\n    }\n  },\n  saveSessionData: function (clientData) {\n    const expInSeconds = (expirationHours+1) * 60 * 60;\n    const data = {\n      email: clientData.email,\n      exp: Math.floor(Date.now() / 1000) + expInSeconds,\n    };\n    var token = jwt.sign(data, credentials.jwt);\n    Cookies.set(cookieName, token, { expires: expirationHours / 24 }); // Set the cookie expiration in days\n  },\n  removeSessionData: function () {\n    Cookies.remove(cookieName);\n  },\n};\n\nexport default JWT_AUTH;\n","import GoogleLogin from  \"@stack-pulse/next-google-login\"\n\n//import saveToGoogleSheets from './func/saveToGoogleSheets'\n\nimport JWT_AUTH from \"./func/JWT_AUTH\"\nimport GlobalVariables from \"./func/GlobalVariables\";\n\nconst credentials = {\n  \"google\":process.env.REACT_APP_GOOGLE_CLIENTID,\n  \"jwt\":process.env.REACT_APP_JWT\n}\n\nfunction Login() {\n\n    function onLogin(googleResponse){\n        console.log(googleResponse);\n        //var inseriu = saveToGoogleSheets(googleResponse.profileObj);\n        //if(inseriu) alert(\"Ponto registrado\");\n        //else alert(\"Falha no ponto\");\n\n        JWT_AUTH.saveSessionData(googleResponse.profileObj);\n        GlobalVariables.profileData = googleResponse.profileObj;\n        \n        window.location.href=GlobalVariables.homepage +\"/\"+ GlobalVariables.profilePage;\n    }\n    \n    const getSession = ()=>{\n      var client = JWT_AUTH.getSessionData();\n      if(client) window.location.href=GlobalVariables.homepage +\"/\"+ GlobalVariables.profilePage;\n    }\n  return (\n    <div className=\"GoogleLogin\">\n        <button onClick={()=>{JWT_AUTH.saveSessionData({\"email\":\"teste\"})}}>TESTE</button>\n        <GoogleLogin\n        clientId={credentials.google}\n        buttonText=\"Continue with Google\"\n        onSuccess={onLogin}\n        onFailure={console.log}\n        cookiePolicy={'single_host_origin'}\n        />\n        <button onClick={()=>{getSession()}}>TESTE2</button>\n        \n    </div>\n  );\n}\n\nexport default Login;\n","import '../App.css';\n\nfunction Header() {\n  return (\n    <div className=\"Header\">\n        <div className='espacamento'/>\n        <h1>Bater ponto na ECS</h1>\n        <div className='espacamento'/>\n    </div>\n  );\n}\n\nexport default Header;\n","import './App.css';\n\nimport Login from './components/Login';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Login/>\n    </div>\n  );\n}\n\nexport default App;\n","// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE,\n  authDomain: \"myapp-d87de.firebaseapp.com\",\n  projectId: \"myapp-d87de\",\n  storageBucket: \"myapp-d87de.appspot.com\",\n  messagingSenderId: \"101658274836\",\n  appId: \"1:101658274836:web:364eb204ab277197d30b01\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport default app;","import React, { useState, useEffect } from \"react\";\nimport JWT_AUTH from \"./func/JWT_AUTH\";\nimport app from \"./func/firebase_setup\";\nimport { getDatabase, ref, get, set} from \"firebase/database\";\nimport GlobalVariables from \"./func/GlobalVariables\";\n\nconst db = getDatabase(app);\n\nfunction emailToHash(email) {\n  let hash = 0;\n\n  for (let i = 0; i < email.length; i++) {\n    const char = email.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n  }\n\n  return Math.abs(hash) + Date.now(); // Convert to a positive number\n}\n\nconst Page = () => {\n  const [userData, setUserData] = useState(null);\n  const [tags, setTags] = useState([]);\n  const [newTag, setNewTag] = useState(\"\");\n\n  const saveProfile = () => {\n    const client = JWT_AUTH.getSessionData();\n    if (!client) {\n      return;\n    }\n    const email = client.email;\n    const id = btoa(email);\n    const tagsUserPath = \"users/\" + id +\"/tags\";\n    const tagsUserRef = ref(db, tagsUserPath);\n    \n    const updatedTags = [...tags, newTag];\n    set(tagsUserRef, updatedTags);\n\n    \n    updatedTags.forEach(element => {\n      if(element!==\"\"){        \n        var tagsPath = \"tags/\" + element.toLowerCase() + \"/\" + userData.public_id;\n        var tagsRef = ref(db, tagsPath);\n        set(tagsRef, true);\n      }\n    });\n\n  };\n\n  useEffect(() => {\n    function getData() {\n      const client = JWT_AUTH.getSessionData();\n      if (!client) {\n        return;\n      }\n      const email = client.email;\n      const id = btoa(email);\n      const userPath = \"users/\" + id;\n      const userRef = ref(db, userPath);\n\n      get(userRef)\n        .then((snapshot) => {\n          if (snapshot.exists()) {\n            const data = snapshot.val();\n            setUserData(data);\n            if (data.tags) {\n              setTags(data.tags); // Set the existing tags\n            }\n          } else {\n            console.log(\"No data available\");\n            const data = {\n              email: email,\n              name: GlobalVariables.profileData.name,\n              profilePictureUrl: GlobalVariables.profileData.imageUrl,\n              tags: [], // Initialize tags as an empty array\n            };\n            const public_id = emailToHash(data.email);\n            data.public_id = public_id;\n            set(userRef, data);\n\n            const publicRef = ref(db, \"public_users/\" + public_id);\n            set(publicRef, { id: id });\n\n            setUserData(data);\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error fetching data:\", error);\n        });\n    }\n\n    getData();\n  }, []); // Empty dependency array to run this effect only once\n\n  const handleAddTag = () => {\n    if (newTag.trim() === \"\") return; // Don't add empty tags\n\n    if (!/^[A-Za-z]+$/.test(newTag)) {\n      // Check if the newTag contains only letters\n      alert(\"Tags can only contain letters.\");\n      return;\n    }\n    setNewTag(newTag.toLowerCase());\n\n    // Add the new tag to the tags array\n    const updatedTags = [...tags, newTag];\n    setTags(updatedTags);\n\n    // Update the userData in the database\n    const updatedUserData = { ...userData, tags: updatedTags };\n    setUserData(updatedUserData);\n\n    // Clear the input field\n    setNewTag(\"\");\n  };\n\n  const handleTagInputChange = (e) => {\n    setNewTag(e.target.value);\n  };\n\n  return (\n    <div>\n      {userData ? (\n        <div>\n          <h2>Profile Information</h2>\n          <div>\n            <img\n              src={userData.profilePictureUrl}\n              alt=\"Profile\"\n              style={{ maxWidth: \"100px\", maxHeight: \"100px\" }}\n            />\n          </div>\n          <div>\n            <strong>Name:</strong> {userData.name}\n          </div>\n          <div>\n            <strong>Email:</strong> {userData.email}\n          </div>\n          <div>\n            <strong>Public Id:</strong>{\" \"}\n            <a\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              href={\n                GlobalVariables.homepage +\n                \"/\" +\n                GlobalVariables.publicProfilePage.split(\":\")[0] +\n                userData.public_id\n              }\n            >\n              {userData.public_id}\n            </a>\n          </div>\n          <div>\n            <strong>Tags:</strong>\n            <ul>\n              {tags.map((tag, index) => (\n                <li key={index}>{tag}</li>\n              ))}\n            </ul>\n            <input\n              type=\"text\"\n              placeholder=\"Add a tag\"\n              value={newTag}\n              onChange={handleTagInputChange}\n            />\n            <button onClick={handleAddTag}>Add Tag</button>\n          </div>\n\n          <button onClick={saveProfile}>SAVE</button>\n        </div>\n      ) : (\n        <p>Loading profile data...</p>\n      )}\n    </div>\n  );\n};\n\nexport default Page;\n","import React, { useState, useEffect } from \"react\";\nimport app from \"./func/firebase_setup\";\nimport { getDatabase, ref, get } from \"firebase/database\";\nimport { useParams } from 'react-router-dom';\n\nconst db = getDatabase(app);\n\nconst Page = () => {\n    const { profile_id } = useParams();\n  const [userData, setUserData] = useState(null);\n\n  useEffect(() => {\n    function getData() {\n      const publicUserPath=\"public_users/\" + profile_id;\n      const publicUserRef = ref(db, publicUserPath);\n\n      get(publicUserRef)\n        .then((snapshot) => {\n          if (snapshot.exists()) {\n            const data = snapshot.val();\n            const userPath=\"users/\" + data.id;\n            const userRef = ref(db, userPath);\n            get(userRef)\n                .then((snapshot) => {\n                if (snapshot.exists()) {\n                    const data = snapshot.val();\n                    const {email, ...otherprops} = data;\n                    setUserData(otherprops);\n                } else {\n                    console.log(\"No data available\");\n                }\n                })\n                .catch((error) => {\n                console.error(\"Error fetching data:\", error);\n                });\n          } else {\n            console.log(\"No data available\");\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error fetching data:\", error);\n        });\n    }\n\n    getData();\n  }, [profile_id]); // Empty dependency array to run this effect only once\n\n  return (\n    <div>\n      {userData ? (\n        <div>\n          <h2>Profile Information</h2>\n          <div>\n            <strong>Name:</strong> {userData.name}\n          </div>\n          <div>\n            <img\n              src={userData.profilePictureUrl}\n              alt=\"Profile\"\n              style={{ maxWidth: \"100px\", maxHeight: \"100px\" }}\n            />\n          </div>\n        </div>\n      ) : (\n        <p>Loading profile data...</p>\n      )}\n    </div>\n  );\n};\n\nexport default Page;\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { getDatabase, ref, get } from \"firebase/database\";\r\nimport GlobalVariables from \"./func/GlobalVariables\";\r\n\r\nconst UsersByTag = () => {\r\n  const { tag } = useParams(); // Get the tag from the URL params\r\n  const [users, setUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Firebase database reference\r\n    const db = getDatabase();\r\n\r\n    // Reference to the \"tags\" node for the specific tag\r\n    const tagRef = ref(db, `tags/${tag}`);\r\n\r\n    // Fetch user IDs associated with the tag\r\n    get(tagRef)\r\n      .then((snapshot) => {\r\n        if (snapshot.exists()) {\r\n          const tagData = snapshot.val();\r\n\r\n          // Get the user IDs associated with the tag\r\n          const userIds = Object.keys(tagData);\r\n        \r\n          setUsers(userIds);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching tag data:\", error);\r\n      });\r\n  }, [tag]); // Fetch data whenever the tag URL parameter changes\r\n\r\n  return (\r\n    <div>\r\n      <h2>Users with Tag: {tag}</h2>\r\n      <div>\r\n        {users.map((user) => (\r\n          <><a target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          href={\r\n            GlobalVariables.homepage +\r\n            \"/\" +\r\n            GlobalVariables.publicProfilePage.split(\":\")[0] +\r\n            user}>{user}</a><br/></>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsersByTag;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { getDatabase, ref, get } from \"firebase/database\";\r\nimport GlobalVariables from \"./func/GlobalVariables\";\r\n\r\nconst UsersByTag = () => {\r\n  const { tag } = useParams(); // Get the tag from the URL params\r\n  const [tags, setTags] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Firebase database reference\r\n    const db = getDatabase();\r\n\r\n    // Reference to the \"tags\" node for the specific tag\r\n    const tagRef = ref(db, `tags`);\r\n\r\n    // Fetch user IDs associated with the tag\r\n    get(tagRef)\r\n      .then((snapshot) => {\r\n        if (snapshot.exists()) {\r\n          const tagData = snapshot.val();\r\n\r\n          // Get the user IDs associated with the tag\r\n          const userIds = Object.keys(tagData);\r\n        \r\n          setTags(userIds);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching tag data:\", error);\r\n      });\r\n  }, [tag]); // Fetch data whenever the tag URL parameter changes\r\n\r\n  return (\r\n    <div>\r\n      <h2>All Tags:</h2>\r\n      <div>\r\n        {tags.map((tag) => (\r\n          <><a target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          href={\r\n            GlobalVariables.homepage +\r\n            \"/\" +\r\n            GlobalVariables.tagPage.split(\":\")[0] +\r\n            tag}>{tag}</a><br/></>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsersByTag;\r\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom/client\";\nimport {\n  createHashRouter,\n  RouterProvider,\n} from \"react-router-dom\";\n\nimport './index.css';\nimport App from './App';\nimport Page from \"./components/Page\";\nimport PublicPage from \"./components/PublicPage\";\nimport GlobalVariables from \"./components/func/GlobalVariables\";\nimport UsersByTag from \"./components/UsersByTag\";\nimport AllTags from \"./components/AllTags\";\n\n// Set the initial hash value to '/#' when the application loads.\nif (window.location.hash === \"\") {\n  window.location.hash = \"/\";\n}\n\nconst router = createHashRouter([\n  {\n    path: \"/\",\n    element: <App />,\n  },\n  {\n    path: GlobalVariables.loginPage,\n    element: <App />\n  },\n  {\n    path: GlobalVariables.profilePage,\n    element: <Page />,\n  },\n  {\n    path: GlobalVariables.publicProfilePage,\n    element: <PublicPage />,\n  },\n  {\n    path: GlobalVariables.tagPage,\n    element: <UsersByTag />,\n  },\n  {\n    path: GlobalVariables.allTagPage,\n    element: <AllTags />,\n  }\n]);\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <React.StrictMode>\n    <RouterProvider router={router} />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}