{"version":3,"sources":["components/func/saveToGoogleSheets.js","components/func/GlobalVariables.js","components/func/JWT_AUTH.js","components/Login.js","components/Header.js","App.js","components/func/firebase_setup.js","components/Page.js","components/PublicPage.js","index.js"],"names":["credentials","email","process","REACT_APP_GOOGLE_EMAIL","key","REACT_APP_GOOGLE_KEY","spreadsheetId","REACT_APP_GOOGLE_SHEET","GoogleSpreadsheet","require","saveToGoogleSheets","GlobalVariables","jwt","cookieName","JWT_AUTH","getSessionData","token","Cookies","get","Error","client","verify","exp","Date","now","this","removeSessionData","e","console","log","message","window","location","href","homepage","loginPage","saveSessionData","clientData","data","Math","floor","sign","set","expires","remove","Login","_jsxs","className","children","_jsx","onClick","GoogleLogin","clientId","buttonText","onSuccess","googleResponse","profileObj","profileData","profilePage","onFailure","cookiePolicy","Header","App","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","crypto","db","getDatabase","Page","_useState","useState","_useState2","_slicedToArray","userData","setUserData","useEffect","id","btoa","userPath","userRef","ref","then","snapshot","exists","val","name","profilePictureUrl","imageUrl","public_id","currentTime","dataToHash","concat","digitsOnly","createHash","update","digest","match","join","parseInt","emailToHash","publicRef","catch","error","getData","publicProfilePage","split","src","alt","style","maxWidth","maxHeight","profile_id","useParams","publicUserPath","publicUserRef","otherprops","_objectWithoutProperties","_excluded","hash","router","createHashRouter","path","element","PublicPage","ReactDOM","document","getElementById","render","React","RouterProvider"],"mappings":"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","file":"static/js/main.fd29aad1.chunk.js","sourcesContent":["var credentials = {}\ncredentials.email = process.env.REACT_APP_GOOGLE_EMAIL;\ncredentials.key = process.env.REACT_APP_GOOGLE_KEY;\ncredentials.spreadsheetId = process.env.REACT_APP_GOOGLE_SHEET;\n//console.log(process.env);\n//console.log(credentials.key);\n//console.log(process.env.REACT_APP_GOOGLE_KEY);\n\nconst { GoogleSpreadsheet } = require('google-spreadsheet');\n\n// Google Sheets Document ID -- PROD\nconst doc = new GoogleSpreadsheet(credentials.spreadsheetId);\n\nfunction getLocalDate(){\n  // Create a new Date object\n  const currentDate = new Date();\n\n  // Adjust the time zone offset to GMT+3 (EEST)\n  currentDate.setUTCHours(currentDate.getUTCHours());\n\n  // Format the date as a string in ISO format\n  //const isoDateGMTPlus3 = currentDate.toISOString();\n\n  const hours = currentDate.getHours().toString().padStart(2, '0');\n  const minutes = currentDate.getMinutes().toString().padStart(2, '0');\n  const day = currentDate.getDate().toString().padStart(2, '0');\n  const month = (currentDate.getMonth() + 1).toString().padStart(2, '0'); // Months are 0-based\n  const year = currentDate.getFullYear().toString().slice(-2);\n\n  const formattedDate = `${hours}:${minutes} ${day}/${month}/${year}`;\n  return formattedDate;\n\n}\n\nasync function saveToGoogleSheets(profileObj) {\n  try{\n    await doc.useServiceAccountAuth({\n        client_email: credentials.email,\n        private_key: credentials.key,\n    });\n\n    await doc.loadInfo(); // Loads document properties and worksheets\n\n    const sheet = doc.sheetsByIndex[0];\n    \n    const row = { Email: profileObj.email, DateISO: getLocalDate(), Nome: profileObj.name};\n    console.log(row);\n    var GoogleSpreadsheetRowInserted = await sheet.addRow(row);\n    if(GoogleSpreadsheetRowInserted) return true;\n  }catch(e){\n      console.log(\"erro inserindo sheet\");\n      console.log(e.message)\n      return false;\n  }\n}\n\nexport default saveToGoogleSheets;\n","const GlobalVariables = {}\nGlobalVariables.homepage=\"https://rslgp.github.io/reactJWT/#\";\nGlobalVariables.loginPage=\"auth/login\";\nGlobalVariables.profilePage=\"page\";\nGlobalVariables.publicProfilePage=\"profile/:profile_id\";\nexport default GlobalVariables;","import Cookies from \"js-cookie\";\nimport GlobalVariables from \"./GlobalVariables\";\nvar jwt = require(\"jsonwebtoken\");\n\nvar credentials = {}\ncredentials.jwt = process.env.REACT_APP_JWT;\n\nconst cookieName = \"access_token\";\nconst expirationHours=1;\n\nconst JWT_AUTH = {\n  getSessionData: function () {\n    try {\n        var token = Cookies.get(cookieName);\n        if (!token) {\n            // Token is not present\n            throw new Error('No Auth Cookie');\n        }\n        var client = jwt.verify(token, credentials.jwt);\n\n        // Check if token has expired\n        if (client.exp && client.exp < Date.now() / 1000) {\n            // Token has expired\n            this.removeSessionData(); // Remove the expired token            \n            throw new Error('Token Expired');\n        }\n        return client;\n    } catch (e) {\n        console.log(e.message);\n        window.location.href=GlobalVariables.homepage +\"/\"+ GlobalVariables.loginPage;\n        return null;\n    }\n  },\n  saveSessionData: function (clientData) {\n    const expInSeconds = (expirationHours+1) * 60 * 60;\n    const data = {\n      email: clientData.email,\n      exp: Math.floor(Date.now() / 1000) + expInSeconds,\n    };\n    var token = jwt.sign(data, credentials.jwt);\n    Cookies.set(cookieName, token, { expires: expirationHours / 24 }); // Set the cookie expiration in days\n  },\n  removeSessionData: function () {\n    Cookies.remove(cookieName);\n  },\n};\n\nexport default JWT_AUTH;\n","import GoogleLogin from  \"@stack-pulse/next-google-login\"\n\nimport saveToGoogleSheets from './func/saveToGoogleSheets'\n\nimport JWT_AUTH from \"./func/JWT_AUTH\"\nimport GlobalVariables from \"./func/GlobalVariables\";\n\nconst credentials = {\n  \"google\":process.env.REACT_APP_GOOGLE_CLIENTID,\n  \"jwt\":process.env.REACT_APP_JWT\n}\n\nfunction Login() {\n\n    function onLogin(googleResponse){\n        console.log(googleResponse);\n        //var inseriu = saveToGoogleSheets(googleResponse.profileObj);\n        //if(inseriu) alert(\"Ponto registrado\");\n        //else alert(\"Falha no ponto\");\n\n        JWT_AUTH.saveSessionData(googleResponse.profileObj);\n        GlobalVariables.profileData = googleResponse.profileObj;\n        \n        window.location.href=GlobalVariables.homepage +\"/\"+ GlobalVariables.profilePage;\n    }\n    \n    const getSession = ()=>{\n      var client = JWT_AUTH.getSessionData();\n      if(client) window.location.href=GlobalVariables.homepage +\"/\"+ GlobalVariables.profilePage;\n    }\n  return (\n    <div className=\"GoogleLogin\">\n        <button onClick={()=>{JWT_AUTH.saveSessionData({\"email\":\"teste\"})}}>TESTE</button>\n        <GoogleLogin\n        clientId={credentials.google}\n        buttonText=\"Continue with Google\"\n        onSuccess={onLogin}\n        onFailure={console.log}\n        cookiePolicy={'single_host_origin'}\n        />\n        <button onClick={()=>{getSession()}}>TESTE2</button>\n        \n    </div>\n  );\n}\n\nexport default Login;\n","import '../App.css';\n\nfunction Header() {\n  return (\n    <div className=\"Header\">\n        <div className='espacamento'/>\n        <h1>Bater ponto na ECS</h1>\n        <div className='espacamento'/>\n    </div>\n  );\n}\n\nexport default Header;\n","import './App.css';\n\nimport Login from './components/Login';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Login/>\n    </div>\n  );\n}\n\nexport default App;\n","// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE,\n  authDomain: \"myapp-d87de.firebaseapp.com\",\n  projectId: \"myapp-d87de\",\n  storageBucket: \"myapp-d87de.appspot.com\",\n  messagingSenderId: \"101658274836\",\n  appId: \"1:101658274836:web:364eb204ab277197d30b01\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport default app;","import React, { useState, useEffect } from \"react\";\nimport JWT_AUTH from \"./func/JWT_AUTH\";\nimport app from \"./func/firebase_setup\";\nimport { getDatabase, ref, get, set } from \"firebase/database\";\nimport GlobalVariables from \"./func/GlobalVariables\";\n\nconst crypto = require('crypto');\n\nconst db = getDatabase(app);\n\nfunction emailToHash(email) {\n  const currentTime = Date.now();\n  const dataToHash = `${email}-${currentTime}`;\n  \n  // Create a hash of the combined data\n  const hash = crypto.createHash('md5').update(dataToHash).digest('hex');\n  \n  // Extract all hexadecimal digits using regex\n  const digitsOnly = hash.match(/[0-9a-fA-F]+/g).join('');\n  \n  // Convert the matched hexadecimal digits to a decimal number\n  const uniqueId = parseInt(digitsOnly, 16);\n  \n  return uniqueId;\n}\n\nconst Page = () => {\n  const [userData, setUserData] = useState(null);\n\n  useEffect(() => {\n    function getData() {\n      const client = JWT_AUTH.getSessionData();\n      if (!client) {\n        return;\n      }\n      const email = client.email;\n      const id = btoa(email);\n      const userPath=\"users/\" + id;\n      const userRef = ref(db, userPath);\n\n      get(userRef)\n        .then((snapshot) => {\n          if (snapshot.exists()) {\n            const data = snapshot.val();\n            setUserData(data);\n          } else {\n            console.log(\"No data available\");\n            const data = {\n              email: email,\n              name: GlobalVariables.profileData.name,              \n              profilePictureUrl: GlobalVariables.profileData.imageUrl,\n            };\n            const public_id=emailToHash(data.email);\n            data.public_id=public_id;\n            set(userRef, data);\n\n            const publicRef = ref(db,\"public_users/\"+public_id);\n            set(publicRef,{id:id})\n            \n            setUserData(data);\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error fetching data:\", error);\n        });\n    }\n\n    getData();\n  }, []); // Empty dependency array to run this effect only once\n\n  return (\n    <div>\n      {userData ? (\n        <div>\n          <h2>Profile Information</h2>\n          <div>\n            <strong>Name:</strong> {userData.name}\n          </div>\n          <div>\n            <strong>Email:</strong> {userData.email}\n          </div>\n          <div>\n            <strong>Public Id:</strong> <a href={GlobalVariables.homepage+\"/\"+GlobalVariables.publicProfilePage.split(\":\")[0]+userData.public_id}>{userData.public_id}</a>\n          </div>\n          <div>\n            <img\n              src={userData.profilePictureUrl}\n              alt=\"Profile\"\n              style={{ maxWidth: \"100px\", maxHeight: \"100px\" }}\n            />\n          </div>\n        </div>\n      ) : (\n        <p>Loading profile data...</p>\n      )}\n    </div>\n  );\n};\n\nexport default Page;\n","import React, { useState, useEffect } from \"react\";\nimport app from \"./func/firebase_setup\";\nimport { getDatabase, ref, get } from \"firebase/database\";\nimport { useParams } from 'react-router-dom';\n\nconst db = getDatabase(app);\n\nconst Page = () => {\n    const { profile_id } = useParams();\n  const [userData, setUserData] = useState(null);\n\n  useEffect(() => {\n    function getData() {\n      const publicUserPath=\"public_users/\" + profile_id;\n      const publicUserRef = ref(db, publicUserPath);\n\n      get(publicUserRef)\n        .then((snapshot) => {\n          if (snapshot.exists()) {\n            const data = snapshot.val();\n            const userPath=\"users/\" + data.id;\n            const userRef = ref(db, userPath);\n            get(userRef)\n                .then((snapshot) => {\n                if (snapshot.exists()) {\n                    const data = snapshot.val();\n                    const {email, ...otherprops} = data;\n                    setUserData(otherprops);\n                } else {\n                    console.log(\"No data available\");\n                }\n                })\n                .catch((error) => {\n                console.error(\"Error fetching data:\", error);\n                });\n          } else {\n            console.log(\"No data available\");\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error fetching data:\", error);\n        });\n    }\n\n    getData();\n  }, []); // Empty dependency array to run this effect only once\n\n  return (\n    <div>\n      {userData ? (\n        <div>\n          <h2>Profile Information</h2>\n          <div>\n            <strong>Name:</strong> {userData.name}\n          </div>\n          <div>\n            <img\n              src={userData.profilePictureUrl}\n              alt=\"Profile\"\n              style={{ maxWidth: \"100px\", maxHeight: \"100px\" }}\n            />\n          </div>\n        </div>\n      ) : (\n        <p>Loading profile data...</p>\n      )}\n    </div>\n  );\n};\n\nexport default Page;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom/client\";\nimport {\n  createHashRouter,\n  RouterProvider,\n} from \"react-router-dom\";\n\nimport './index.css';\nimport App from './App';\nimport Page from \"./components/Page\";\nimport PublicPage from \"./components/PublicPage\";\nimport GlobalVariables from \"./components/func/GlobalVariables\";\n\n// Set the initial hash value to '/#' when the application loads.\nif (window.location.hash === \"\") {\n  window.location.hash = \"/\";\n}\n\nconst router = createHashRouter([\n  {\n    path: \"/\",\n    element: <App />,\n  },\n  {\n    path: GlobalVariables.loginPage,\n    element: <App />\n  },\n  {\n    path: GlobalVariables.profilePage,\n    element: <Page />,\n  },\n  {\n    path: GlobalVariables.publicProfilePage,\n    element: <PublicPage />,\n  }\n]);\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <React.StrictMode>\n    <RouterProvider router={router} />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}